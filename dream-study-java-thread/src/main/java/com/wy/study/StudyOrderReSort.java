package com.wy.study;/** * 指令重排序:线程在执行代码时,并不是所有的都是按照顺序执行的,为了提高程序性能,会发生执行顺序的改变. * 有依赖性的代码不能进行指令重排,比如写读,写写,读写等.指令重排分为编译器重排和执行器(如CPU)重排 * 同一段代码,重排序可能发生,也可能不会发生 *  * 有序性->happens-before原则: *  * <pre> * 程序次序规则:一个线程内,按照代码顺序,写在前面的操作先行发生于写在后面的操作 * 锁定规则:一个unlock操作先行发生于后面对同一个锁的lock操作.锁释放后才可以再次使用 * volatile变量规则:对一个变量的写操作先行发生于后面对这个变量的读操作 * 传递规则:如果操作A先行发生于操作B,而操作B又先行发生于操作C,则可以认为操作A先行于操作C * 线程启动规则:Thread对象的start()先行发生于此线程的每一个动作 * 线程中断规则:对线程interrupt()的调用先行发生于被中断线程的代码检测到中断事件的发生 * 线程终结规则:线程中所有的操作都先行发生于线程的终止检测,可以通过Thread.join()和isAlive()的返回值检测线程是否终止 * 对象终结规则:一个对象的初始化完成先行发生于他的finalize()的开始 * </pre> * * @author 飞花梦影 * @date 2021-06-05 11:09:37 */public class StudyOrderReSort {}