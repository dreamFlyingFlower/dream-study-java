spring:
  main: 
    allow-bean-definition-overriding: true
  shardingsphere:
    props:
      # 显示sql
      sql: 
        show: true
    # 配置数据源
    datasource:
      # 配置真实数据库
      names: ds1,ds2,ds3
      ds1: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/ts_user?useUnicode=true&useSSL=false&characterEncoding=UTF8&serverTimezone=Asia/Shanghai
        username: root
        password: 52LDforever
        maxPoolSize: 100
        minPoolSize: 5
      ds2: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3307/ts_user?useUnicode=true&useSSL=false&characterEncoding=UTF8&serverTimezone=Asia/Shanghai
        username: root
        password: 52LDforever
        maxPoolSize: 100
        minPoolSize: 5
      ds3: 
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3307/ts_user?useUnicode=true&useSSL=false&characterEncoding=UTF8&serverTimezone=Asia/Shanghai
        username: root
        password: 52LDforever
        maxPoolSize: 100
        minPoolSize: 5
    sharding: 
      # 绑定表,2张表中的字段要一样
      binding-tables:
        table_name1,table_name2
      # 定义主从数据库对应的逻辑数据源
      master-slave-rules:
        logic1:
          master-data-source-name: ds1
          slave-data-source-names:
          - ds2
          - ds3
      # 配置默认数据源ds1,主要用于写
      default-data-source-name: ds1
      # 默认分库分表策略,可不指定
      default-database-strategy:
        standard:
          sharding-column: user_id
          # 精准分库算法,需要自定义实现PreciseShardingAlgorithm
          precise-algorithm-class-name: com.wy.sharding.PreciseDbShardingAlgorithm
          # 范围分库算法,需要自定义实现RangeShardingAlgorithm
          range-algorithm-class-name: com.wy.sharding.RangeDbShardingAlgorithm
        inline:
          # 进行分库的字段
          sharding-column: id
          # 进行分库字段的算法
          algorithm-expression: logic1
      default-table-strategy:
        standard:
          sharding-column: user_id
          # 精准分表算法,需要自定义实现PreciseShardingAlgorithm
          precise-algorithm-class-name: com.wy.sharding.PreciseDbShardingAlgorithm
          # 范围分表算法,需要自定义实现RangeShardingAlgorithm
          range-algorithm-class-name:  com.wy.sharding.RangeDbShardingAlgorithm
      # 逻辑表分库分表
      tables:
        # 需要分库分表的表名
        ts_user: 
          # 主键策略
          key-generator: 
            # 主键列名
            column: user_id
            # 主键生成策略,暂时只有UUID和SNOWFLAKE.自定义可实现ShardingKeyGenerator
            type: SNOWFLAKE
          # 真实节点相同表分库分表:多数据源$->{0..N}.逻辑表名$->{0..N}
          actual-data-nodes: logic$->{0..1}.ts_user$->{0..1}
          # 真实节点不同表分库分表:多数据源$->{0..N}.逻辑表名$->{0..N}
          # actual-data-nodes: logic0.ts_user$->{0..1},logic1.ts_user$->{2..4}
          # 真实节点单库分表,单数据源
          # actual-data-nodes: logic0.ts_user$->{0..4}
          # 真实节点全部手动指定
          # actual-data-nodes=logic0.ts_user0,logic.ts_user0,logic0.ts_user1,logic1.ts_user1
          # 数据源分片策略
          database-strategy:
            # 行表达式
            inline:
              # 数据源分片字段
              sharding-column: user_id
              # 数据源分片算法,多个时可使用简单算法进行分割.$相当于占位符,值为->后的大括号的结果
              # algorithm-expression: logic$->{user_id % 2 + 1}
              algorithm-expression: logic1
          # 表分片策略
          table-strategy: 
            inline:
              # 表分片字段
              sharding-column: user_id
              # 表分片算法
              algorithm-expression: ts_user$->{user_id%2}
    # 定义单个主从对应主从关系
    masterslave: 
      # 配置主从名称
      name: ms
      # 设置主库master,负责数据的写入
      master-data-source-name: ds1
      # 配置从库slave节点
      slave-data-source-names: ds2,ds3
      # 配置slave节点的负载均衡策略,有轮询和随机.自定义可实现MasterSlaveLoadBalanceAlgorithm接口
      load-balance-algorithm-type: ROUND_ROBIN