<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>dream.flying.flower</groupId>
		<artifactId>dream-parent2</artifactId>
		<version>0.0.1</version>
		<relativePath />
	</parent>

	<artifactId>dream-study-java-spring</artifactId>
	<name>dream-study-java-spring</name>
	<description>Study for springcommon</description>

	<properties>
		<java.version>1.8</java.version>
		<debezium.version>1.5.2.Final</debezium.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>dream.flying.flower</groupId>
			<artifactId>dream-study-java-common</artifactId>
			<version>0.0.1</version>
		</dependency>
		<dependency>
			<groupId>dream.flying.flower</groupId>
			<artifactId>dream-framework-mybatis-plus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-loader</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-quartz</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.retry</groupId>
			<artifactId>spring-retry</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.rholder</groupId>
			<artifactId>guava-retrying</artifactId>
			<version>2.0.0</version>
		</dependency>

		<dependency>
			<groupId>io.minio</groupId>
			<artifactId>minio</artifactId>
		</dependency>
		<!-- minio文件断点续传 -->
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk-s3</artifactId>
		</dependency>
		<dependency>
			<groupId>io.debezium</groupId>
			<artifactId>debezium-api</artifactId>
			<version>${debezium.version}</version>
		</dependency>
		<dependency>
			<groupId>io.debezium</groupId>
			<artifactId>debezium-embedded</artifactId>
			<version>${debezium.version}</version>
		</dependency>
		<dependency>
			<groupId>io.debezium</groupId>
			<artifactId>debezium-connector-mysql</artifactId>
			<version>${debezium.version}</version>
		</dependency>
		<dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
			<version>4.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tika</groupId>
			<artifactId>tika-parsers-standard-package</artifactId>
		</dependency>

		<dependency>
			<groupId>com.yomahub</groupId>
			<artifactId>liteflow-spring-boot-starter</artifactId>
			<version>2.11.4.2</version>
		</dependency>
		<dependency>
			<groupId>com.github.lianjiatech</groupId>
			<artifactId>retrofit-spring-boot-starter</artifactId>
			<version>3.1.1</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.tika</groupId>
				<artifactId>tika-bom</artifactId>
				<version>2.8.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<!-- 传统打jar包直接将整个项目class文件以及以来jar包都打进去,项目越大,jar包越大,不利用微服务部署,可采用以下方式 -->
	<!-- 第一种方式:将依赖的jar包指向其他目录,并且在启动项目时添加参数指定依赖的jar包目录:-Djava.ext.dirs=lib -->
	<!-- <build> -->
	<!-- <finalName>${project.artifactId}</finalName> -->
	<!-- <plugins> -->
	<!-- 将项目需要依赖的jar包拷贝到指定目录,然后让项目去指该目录查找依赖 -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-dependency-plugin</artifactId> -->
	<!-- <executions> -->
	<!-- <execution> -->
	<!-- <id>copy-dependencies</id> -->
	<!-- <phase>package</phase> -->
	<!-- <goals> -->
	<!-- <goal>copy-dependencies</goal> -->
	<!-- </goals> -->
	<!-- <configuration> -->
	<!-- <outputDirectory>${project.build.directory}/lib</outputDirectory> -->
	<!-- <excludeTransitive>false</excludeTransitive> -->
	<!-- <stripVersion>false</stripVersion> -->
	<!-- <silent>true</silent> -->
	<!-- </configuration> -->
	<!-- </execution> -->
	<!-- </executions> -->
	<!-- </plugin> -->
	<!-- <plugin> -->
	<!-- <groupId>org.springframework.boot</groupId> -->
	<!-- <artifactId>spring-boot-maven-plugin</artifactId> -->
	<!-- <configuration> -->
	<!-- 不存在的include引用,相当于排除所有maven依赖jar,没有任何三方jar文件打入输出jar -->
	<!-- <includes> -->
	<!-- <include> -->
	<!-- <groupId>null</groupId> -->
	<!-- <artifactId>null</artifactId> -->
	<!-- </include> -->
	<!-- </includes> -->
	<!-- <layout>ZIP</layout> -->
	<!-- </configuration> -->
	<!-- <executions> -->
	<!-- <execution> -->
	<!-- <goals> -->
	<!-- <goal>repackage</goal> -->
	<!-- </goals> -->
	<!-- </execution> -->
	<!-- </executions> -->
	<!-- </plugin> -->
	<!-- </plugins> -->
	<!-- </build> -->
	<!-- 第二种方式:将所有项目的依赖jar放到指定目录,但是根据指定版本进行加载,不必加载所有依赖jar包,此时不必添加额外启动参数 -->
	<!-- 微服务jar中的META-INFO/MANIFEST文件会生成根据模块依赖组件列表的Class-Path属性,避免加载不同版本的jar -->
	<!-- <build> -->
	<!-- <finalName>${project.artifactId}</finalName> -->
	<!-- <plugins> -->
	<!-- 基于maven-jar-plugin插件实现把依赖jar定义写入输出jar的META-INFO/MANIFEST文件 -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-jar-plugin</artifactId> -->
	<!-- <configuration> -->
	<!-- <archive> -->
	<!-- <manifest> -->
	<!-- <addClasspath>true</addClasspath> -->
	<!-- <classpathPrefix>lib/</classpathPrefix> -->
	<!-- <useUniqueVersions>false</useUniqueVersions> -->
	<!-- </manifest> -->
	<!-- </archive> -->
	<!-- </configuration> -->
	<!-- </plugin> -->
	<!-- 拷贝项目所有依赖jar文件到构建lib目录下 -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-dependency-plugin</artifactId> -->
	<!-- <executions> -->
	<!-- <execution> -->
	<!-- <id>copy-dependencies</id> -->
	<!-- <phase>package</phase> -->
	<!-- <goals> -->
	<!-- <goal>copy-dependencies</goal> -->
	<!-- </goals> -->
	<!-- <configuration> -->
	<!-- 各子模块按照实际层级定义各模块对应的属性值,检查所有微服务模块依赖jar文件合并复制到同一个目录 -->
	<!-- <outputDirectory>${boot-jar-output}/lib</outputDirectory> -->
	<!-- <excludeTransitive>false</excludeTransitive> -->
	<!-- <stripVersion>false</stripVersion> -->
	<!-- <silent>false</silent> -->
	<!-- </configuration> -->
	<!-- </execution> -->
	<!-- </executions> -->
	<!-- </plugin> -->
	<!-- <plugin> -->
	<!-- <groupId>org.springframework.boot</groupId> -->
	<!-- <artifactId>spring-boot-maven-plugin</artifactId> -->
	<!-- <configuration> -->
	<!-- <includes> -->
	<!-- 不存在的include引用,相当于排除所有maven依赖jar,没有任何三方jar文件打入输出jar -->
	<!-- <include> -->
	<!-- <groupId>null</groupId> -->
	<!-- <artifactId>null</artifactId> -->
	<!-- </include> -->
	<!-- </includes> -->
	<!-- <layout>ZIP</layout> -->
	<!-- 基于maven-jar-plugin输出微服务jar文件进行二次spring boot重新打包文件的输出目录 -->
	<!-- 所有微服务构建输出jar文件统一输出到与lib同一个目录,便于共同引用同一个lib目录 -->
	<!-- <outputDirectory>${boot-jar-output}</outputDirectory> -->
	<!-- </configuration> -->
	<!-- <executions> -->
	<!-- <execution> -->
	<!-- <goals> -->
	<!-- <goal>repackage</goal> -->
	<!-- </goals> -->
	<!-- </execution> -->
	<!-- </executions> -->
	<!-- </plugin> -->
	<!-- </plugins> -->
	<!-- </build> -->
	<!-- 第三种方式:有些jar包并不在maven仓库中,要么搭建私服,将这些jar包放进去,要么使用systemPath方式 -->
	<!-- 需要根据实际情况在properties中定义boot-jar-output等值 -->
	<!-- <build> -->
	<!-- <finalName>${project.artifactId}</finalName> -->
	<!-- <plugins> -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-jar-plugin</artifactId> -->
	<!-- <configuration> -->
	<!-- <archive> -->
	<!-- <manifest> -->
	<!-- <addClasspath>true</addClasspath> -->
	<!-- <classpathPrefix>lib/</classpathPrefix> -->
	<!-- <useUniqueVersions>false</useUniqueVersions> -->
	<!-- </manifest> -->
	<!-- <manifestEntries> -->
	<!-- 非官方第三方jar在pom中是以systemPath方式引入的,maven-jar-plugin组件没有直接参数声明包含指定scope的组件 -->
	<!--
	通过使用额外定义Class-Path来追加指定依赖组件列表,在子模块按实际情况指定jar-manifestEntries-classpath即可 -->
	<!-- 例如(注意前面个点及各空格分隔符):. lib/xxx-1.0.0.jar
	lib/yyy-2.0.0.jar.详见各子模块boot-jar-output属性定义 -->
	<!-- <Class-Path>${jar-manifestEntries-classpath}</Class-Path> -->
	<!-- </manifestEntries> -->
	<!-- </archive> -->
	<!-- </configuration> -->
	<!-- </plugin> -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-dependency-plugin</artifactId> -->
	<!-- <executions> -->
	<!-- <execution> -->
	<!-- <id>copy-dependencies</id> -->
	<!-- <phase>package</phase> -->
	<!-- <goals> -->
	<!-- <goal>copy-dependencies</goal> -->
	<!-- </goals> -->
	<!-- <configuration> -->
	<!-- <outputDirectory>${boot-jar-output}/lib</outputDirectory> -->
	<!-- <excludeTransitive>false</excludeTransitive> -->
	<!-- <stripVersion>false</stripVersion> -->
	<!-- <silent>false</silent> -->
	<!-- </configuration> -->
	<!-- </execution> -->
	<!-- </executions> -->
	<!-- </plugin> -->
	<!-- <plugin> -->
	<!-- <groupId>org.springframework.boot</groupId> -->
	<!-- <artifactId>spring-boot-maven-plugin</artifactId> -->
	<!-- <configuration> -->
	<!-- <includes> -->
	<!-- <include> -->
	<!-- <groupId>null</groupId> -->
	<!-- <artifactId>null</artifactId> -->
	<!-- </include> -->
	<!-- </includes> -->
	<!-- <layout>ZIP</layout> -->
	<!-- <outputDirectory>${boot-jar-output}</outputDirectory> -->
	<!-- </configuration> -->
	<!-- <executions> -->
	<!-- <execution> -->
	<!-- <goals> -->
	<!-- <goal>repackage</goal> -->
	<!-- </goals> -->
	<!-- </execution> -->
	<!-- </executions> -->
	<!-- </plugin> -->
	<!-- </plugins> -->
	<!-- </build> -->
	<!--
	在其他模块中引入第三方jar时需要定义boot-jar-output,jar-manifestEntries-classpath,同时要指定systemPath -->
	<!-- 以相对路径方式定义第三方依赖组件 -->
	<!-- <dependency> -->
	<!-- <groupId>dream.flying.flower</groupId> -->
	<!-- <artifactId>dream-tool-core</artifactId> -->
	<!-- <version>0.0.1</version> -->
	<!-- <scope>system</scope> -->
	<!--
	<systemPath>${project.basedir}/lib/dream-tool-core-0.0.1.jar</systemPath> -->
	<!-- </dependency> -->
	<!-- 搭配maven-assembly-plugin插件进行使用 -->
	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<!-- 传递给脚本的参数值 -->
				<activeProfile>dev</activeProfile>
				<package-name>${project.name}-dev-${project.version}</package-name>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<activeProfile>test</activeProfile>
				<package-name>${project.name}-dev-${project.version}</package-name>
			</properties>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<activeProfile>prod</activeProfile>
				<package-name>${project.name}-dev-${project.version}</package-name>
			</properties>
		</profile>
	</profiles>
	<!-- https://mp.weixin.qq.com/s/WipGDWfK-_zP6afq7kr-cA 补全 -->
	<build>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<!--项目打包完成的包中只包含当前环境文件-->
					<include>mapper/**/*.xml</include>
					<include>logback-spring.xml</include>
					<include>static/**</include>
					<include>application.yml</include>
					<include>bootstrap.properties</include>
				</includes>
				<!--打包排除项 -->
				<excludes>
					<exclude>**/*.sh</exclude>
					<exclude>**/*.rar</exclude>
				</excludes>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.7.18</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<!-- The configuration of the plugin -->
				<configuration>
					<!-- Specifies the configuration file of the assembly plugin -->
					<descriptors>
						<descriptor>
							${project.basedir}/src/main/assembly/assembly.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>