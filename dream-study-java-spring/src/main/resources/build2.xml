<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- 传统打jar包直接将整个项目以及依赖都打进去,项目越大,jar包越大,不利于服务部署,可采用以下方式 -->
	<!-- 第二种:将所有项目的依赖jar放到指定目录,但是根据指定版本进行加载,不必加载所有依赖jar包,此时不必添加额外启动参数 -->
	<!-- 微服务jar中的META-INFO/MANIFEST文件会生成根据模块依赖组件列表的Class-Path属性,避免加载不同版本的jar -->
	<!-- 基于maven-jar-plugin插件实现把依赖jar定义写入输出jar的META-INFO/MANIFEST文件 -->
	<build>
		<finalName>${project.artifactId}</finalName>
		<directory>/app/server/lib</directory>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<useUniqueVersions>false</useUniqueVersions>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<!-- 拷贝项目所有依赖jar文件到构建lib目录下 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<!-- 各子模块按照实际层级定义各模块对应的属性值,检查所有微服务模块依赖jar文件合并复制到同一个目录 -->
							<outputDirectory>${boot-jar-output}/lib</outputDirectory>
							<excludeTransitive>false</excludeTransitive>
							<stripVersion>false</stripVersion>
							<silent>false</silent>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<includes>
						<!-- 不存在的include引用,相当于排除所有maven依赖jar,没有任何三方jar文件打入输出jar -->
						<include>
							<groupId>null</groupId>
							<artifactId>null</artifactId>
						</include>
					</includes>
					<layout>ZIP</layout>
					<!-- 基于maven-jar-plugin输出微服务jar文件进行二次spring boot重新打包文件的输出目录 -->
					<!-- 所有微服务构建输出jar文件统一输出到与lib同一个目录,便于共同引用同一个lib目录 -->
					<outputDirectory>${boot-jar-output}</outputDirectory>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>