# 大部分配置只在单数据源有效
mybatis:
  # mapper.xml文件
  mapper-locations: classpath:mappers/*.xml
  # 全局配置文件,该全局配置文件中的属性可以直接在application中配置
  configuration:
    # 数据库下划线转驼峰,true为转,false不变
    map-underscore-to-camel-case: true
    cache-enabled: false
    lazy-loading-enabled: true
    aggressive-lazy-loading: true
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    local-cache-scope: session
    
# 分页插件
pagehelper:
  helper-dialect: mysql
  offset-as-page-num: true
  row-bounds-with-count: false
  page-size-zero: false
  reasonable: false
  support-methods-arguments: false
  auto-runtime-dialect: false
  
logging:
  level: 
    '[com.wy.repository]': debug

spring:
  datasource: 
    # 若数据库没有指定时区,连接还需要加上时区.多数据源情况下会从hikari的配置文件中查找数据库连接
    url: jdbc:mysql://localhost:3306/simpleoa?autoReconnect=true&useUnicode=true&serverTimezone=GMT&useSSL=false&tinyInt1isBit=false&allowMultiQueries=true
    username: root
    password: 52LDforever
    driverClassName: com.mysql.cj.jdbc.Driver
    # 使用druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 初始化大小,最小,最大
      initial-size: 8
      min-idle: 5 
      max-active: 20
      # 配置获取连接等待超时的时间,单位毫秒
      max-wait: 10000
      # 配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小和最大生存的时间,单位是毫秒
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000
      # 测试连接是否可用
      validation-query: SELECT 1
      # 应用向连接池申请连接,并且testOnBorrow为false时,连接池将会判断连接是否处于空闲状态,如果是,则验证这条连接是否可用
      test-while-idle: true
      # 如果为true,应用向连接池申请连接时,连接池会判断这条连接是否是可用的,默认false
      test-on-borrow: false
      # 如果为true,当应用使用完连接,连接池回收连接的时候会判断该连接是否还可用,默认false
      test-on-return: false
      # 是否缓存preparedStatement,也就是PSCach.PSCache对支持游标的数据库性能提升巨大,比如oracle
      poolPreparedStatements: true
      # 要启用PSCache,必须配置大于0,当大于0时, poolPreparedStatements自动触发修改为true,
      # 在Druid中,不会存在Oracle下PSCache占用内存过多的问题,可以将该值配置大一些,比如说100
      max-open-prepared-statements: 20
      # 连接池中的minIdle数量以内的连接,空闲时间超过minEvictableIdleTimeMillis,则会执行keepAlive操作
      keepAlive: true
      # Spring 监控,利用aop 对指定接口的执行时间,jdbc数进行记录
      aop-patterns: "com.wy.repository.*"
      # 通过connectProperties属性来打开mergeSql功能,慢SQL记录
      connect-properties: 
        druid: 
          stat: 
            mergeSql: true
            slowSqlMillis: 5000
      # 配置监控统计拦截的filters,stat必须有,否则监控界面sql无法统计,wall用于防火墙
      filters: stat,wall,slf4j
      # 自己配置监控统计拦截的filter
      filter:
        # 数据库SQL监控
        stat:
          enabled: true
          db-type: mysql
          merge-sql: true
          # 开启慢sql监控,超过2s 就认为是慢sql,记录到日志中
          log-slow-sql: true
          slow-sql-millis: 2000
        wall:
          enabled: true
          config: 
            alter-table-allow: false
            truncate-allow: false
            drop-table-allow: false
            none-base-statement-allow: false
            update-where-none-check: true
            select-into-outfile-allow: false
            metadata-allow: true
            multi-statement-allow: true
          log-violation: true
          throw-exception: true
        # 日志监控,使用slf4j 进行日志输出
        slf4j:
          enabled: true
          statement-log-error-enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
      # 配置WebStatFilter,用于采集web关联监控的数据
      web-stat-filter:
        enabled: true
        # 过滤所有url
        url-pattern: /*
        # 排除一些不必要的url
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
        # 开启session统计功能
        session-stat-enable: true
        # session的最大个数,默认100
        session-stat-max-count: 1000
      # 配置StatViewServlet监控页面,用于展示Druid的统计信息
      stat-view-servlet:
        enabled: true
        # 访问内置监控页面的路径,内置监控页面的首页是/druid/index.html
        url-pattern: /druid/*
        # 不允许清空统计数据,重新计算
        reset-enable: false
        # 配置监控页面访问密码
        login-username: root
        login-password: 123
        # 允许访问的地址,如果allow没有配置或者为空,则允许所有访问
        allow: 127.0.0.1
        # 拒绝访问的地址,deny优先于allow,如果在deny列表中,就算在allow列表中,也会被拒绝    
#        deny: